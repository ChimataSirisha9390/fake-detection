# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xq_gcZ51ptsCSUowQru3fgvY-p8iedL0
"""

class BookingSystem:
    def __init__(self):
        self.movies = [
            Movie("Avengers: Endgame", 100, 10),
            Movie("The Lion King", 80, 8),
            Movie("Joker", 50, 12)
        ]

    def display_movies(self):
        print("\nAvailable Movies:")
        for idx, movie in enumerate(self.movies, 1):
            print(f"{idx}. {movie.title} - {movie.available_seats} seats available")

    def book_ticket(self, movie_index, seat_number):
        movie = self.movies[movie_index - 1]
        if movie.book_seat(seat_number):
            print(f"Seat {seat_number} booked successfully for {movie.title}.")
        else:
            print(f"Seat {seat_number} is already booked.")

    def cancel_ticket(self, movie_index, seat_number):
        movie = self.movies[movie_index - 1]
        if movie.cancel_seat(seat_number):
            print(f"Seat {seat_number} canceled successfully for {movie.title}.")
        else:
            print(f"Seat {seat_number} was not booked.")

def main():
    system = BookingSystem()
    while True:
        system.display_movies()
        print("\nOptions:")
        print("1. Book Ticket")
        print("2. Cancel Ticket")
        print("3. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            movie_choice = int(input("Enter movie number to book: "))
            seat_number = int(input("Enter seat number to book: "))
            system.book_ticket(movie_choice, seat_number)
        elif choice == '2':
            movie_choice = int(input("Enter movie number to cancel: "))
            seat_number = int(input("Enter seat number to cancel: "))
            system.cancel_ticket(movie_choice, seat_number)
        elif choice == '3':
            print("Thank you for using the booking system!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()

pip install numpy pandas scikit-learn tensorflow matplotlib

import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import matplotlib.pyplot as plt

# Step 1: Load the dataset
data = pd.read_csv('WELFake_Dataset.csv', on_bad_lines='skip', low_memory=False)

# Step 2: Drop unnecessary columns
data = data.drop(['Unnamed: 0'], axis=1)

# Step 2.1: Drop rows with missing values in the 'text' column
data.dropna(subset=['text'], inplace=True)


# Step 3: Encode labels: 1 for real, 0 for fake
label_encoder = LabelEncoder()
data['label'] = label_encoder.fit_transform(data['label'])

# Step 4: Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=42)

# Step 5: Initialize the tokenizer
tokenizer = Tokenizer(num_words=5000, oov_token="<OOV>")
tokenizer.fit_on_texts(X_train)

# Step 6: Convert texts to sequences
X_train_seq = tokenizer.texts_to_sequences(X_train)
X_test_seq = tokenizer.texts_to_sequences(X_test)

# Step 7: Pad sequences to ensure uniform input size
X_train_pad = pad_sequences(X_train_seq, padding='post', maxlen=200)
X_test_pad = pad_sequences(X_test_seq, padding='post', maxlen=200)

# Step 8: Build the model
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=64, input_length=200),
    tf.keras.layers.GlobalAveragePooling1D(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Step 9: Train the model
history = model.fit(X_train_pad, y_train, epochs=5, validation_data=(X_test_pad, y_test), batch_size=64)

# Step 10: Evaluate the model
y_pred = (model.predict(X_test_pad) > 0.5).astype("int32")

# Step 11: Print accuracy and classification report
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")
print(classification_report(y_test, y_pred))

# Step 12: Plot training history
plt.plot(history.history['accuracy'], label='Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()